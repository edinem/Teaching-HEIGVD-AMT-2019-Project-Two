swagger: '2.0'
info:
  version: '0.1.0'
  title: my simple api
  description: An API to demonstrate Swagger
host: localhost:8080
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /users:
    post:
      description: Create a user
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/FullUser'
      responses:
        '201':
          description: created
          schema:
            type: object
    get:
      security:
        - Bearer: []
      description: get the list of all users
      operationId: getAllUsers
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleUser'
    put:
      security:
        - Bearer: []
      description: update a user
      operationId: updateUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/FullUser'
      responses:
        '201':
          description: updated
          schema:
            type: object

  /users/{userId}:
    delete:
      security:
        - Bearer: []
      description: Delete a user
      operationId: deleteUser
      consumes:
        - application/json
      parameters:
        - name: userId
          in: path
          type: string
          required: true
      responses:
        '201':
          description: deleted
          schema:
            type: object
    get:
      security:
        - Bearer: []
      description: Get a user
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          type: string
          required: true
      responses:
        '200':
          description: success
          schema:
            type: object
            items:
              $ref: '#/definitions/UserMinimum'

  /users/authentication/:
    post:
      description: authenticate a user
      operationId: authenticateUser
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/LogInUser'
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
          schema:
            type: string



definitions:
  UserMinimum:
    type: object
    required:
      - email
    properties:
      email:
        type: string

  LogInUser:
    allOf:
      - $ref: '#/definitions/UserMinimum'
      - type: object
        required:
          - password
        properties:
          password:
            type: string

  SimpleUser:
    allOf:
      - $ref: '#/definitions/UserMinimum'
      - type: object
        required:
          - firstName
          - lastName
        properties:
          firstName:
            type: string
          lastName:
            type: string

  FullUser:
    allOf:
      - $ref: '#/definitions/SimpleUser'
      - $ref: '#/definitions/LogInUser'
      - type: object
        required:
          - firstName
          - lastName
        properties:
          firstName:
            type: string
          lastName:
            type: string


  User:
    type: object
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string

  UserWithoutPassword:
    type: object
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string